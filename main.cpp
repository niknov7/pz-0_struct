#include <iostream>#include "structs.h"#include "func.h"int main() {    Point point = {2.0, 3.0};    std::cout << "Point: ";    printPoint(point);    Circle circle1 = {{5.0, 5.0}, 3.0};    std::cout << std::endl << "Circle: ";    printCircle(circle1);    std::cout << "Circumference: " << circleLength(circle1) << std::endl;    std::cout << "Area: " << circleArea(circle1) << std::endl;    Square square1 = {{1.0, 6.0}, 4.0};    std::cout << std::endl << "Square: ";    printSquare(square1);    std::cout << "Perimeter: " << squarePerimeter(square1) << std::endl;    std::cout << "Area: " << squareArea(square1) << std::endl;    std::cout << std::endl << "[Point inclusion check]" << std::endl;    std::cout << "Point is " << (isPointInCircle(point, circle1) ? "inside" : "outside") << " the circle" << std::endl;    std::cout << "Point is " << (isPointOnCircle(point, circle1) ? "on" : "not on") << " the circle boundary" <<            std::endl;    std::cout << "Point is " << (isPointInSquare(point, square1) ? "inside" : "outside") << " the square" << std::endl;    std::cout << "Point is " << (isPointOnSquare(point, square1) ? "on" : "not on") << " the square boundary" <<            std::endl;    std::cout << std::endl << "[Shape intersection check]" << std::endl;    Circle circle2 = {{7.0, 5.0}, 2.0};    std::cout << "Second circle: ";    printCircle(circle2);    std::cout << "Circles " << (areCirclesIntersecting(circle1, circle2) ? "intersect" : "do not intersect") <<            std::endl;    Square square2 = {{3.0, 8.0}, 5.0};    std::cout << "Second square: ";    printSquare(square2);    std::cout << "Squares " << (areSquaresIntersecting(square1, square2) ? "intersect" : "do not intersect") <<            std::endl;    std::cout << "Circle and square " << (areCircleSquareIntersecting(circle1, square1)                                              ? "intersect"                                              : "do not intersect") << std::endl;    std::cout << std::endl << "[Shape containment check]" << std::endl;    std::cout << "First circle is " << (isCircleInCircle(circle1, circle2) ? "inside" : "not inside") <<            " the second circle" << std::endl;    std::cout << "First square is " << (isSquareInSquare(square1, square2) ? "inside" : "not inside") <<            " the second square" << std::endl;    std::cout << "Square is " << (isSquareInCircle(square1, circle1) ? "inside" : "not inside") << " the circle" <<            std::endl;    std::cout << "Circle is " << (isCircleInSquare(circle1, square1) ? "inside" : "not inside") << " the square" <<            std::endl;    std::cin.get();    return 0;}